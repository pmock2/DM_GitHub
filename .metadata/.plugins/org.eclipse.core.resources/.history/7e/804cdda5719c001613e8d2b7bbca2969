package teamHarambe;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.net.SocketException;

import org.json.JSONObject;

public class ConnectionHandler implements Runnable {
	Socket s;
	BufferedReader fromClient;
	PrintStream toClient;
	
	//TODO store schedule in database and have ConnectionHandler read from db
	ConnectionHandler(Socket s) throws IOException {
		this.s = s;
		this.fromClient = new BufferedReader(new InputStreamReader(s.getInputStream()));
		this.toClient = new PrintStream(s.getOutputStream());
	}
	
	public void run() {
		int permissionLevel = 0;
		Referee userAccount = null;
		
		while (true) {
			try {
				String message = fromClient.readLine();
				System.out.println("Command from client: " + message);
				if (message.equals("Get_Schedule")) {
					toClient.println(Server.schedule.toJSON());
					toClient.println("End_Schedule");
					System.out.println("Sent schedule to client");
				} else if (message.equals("Login")) {
					String email = fromClient.readLine();
					String password = fromClient.readLine();
					Referee loginAs = refereeFromEmail(email);
					
					if (loginAs != null && loginAs.verifyPassword(password)) {
						userAccount = loginAs;
						permissionLevel = (userAccount.isSuperReferee ? 2 : 1);
						toClient.println("Login_Success");
						toClient.println(permissionLevel);
					} else {
						toClient.println("Login_Fail");
					}
				} else if (message.equals("Get_Rankings")) {
					toClient.println(Server.rankingsFromSchedule().toString());
					toClient.println("End_Rankings");
				}
			} catch (SocketException e) {
				System.out.println("Client disconnected.");
				break;
			} catch (IOException e) {
				System.out.println("There was an issue: " + e);
				break;
			}
		}
	}
	
	private Referee refereeFromEmail(String email) {
		Referee referee = null;
		for (int i=0; i < Server.referees.size(); i++) {
			if (Server.referees.get(i).getEmail().equals(email)) {
				return Server.referees.get(i);
			}
		}
		
		return referee;
	}
}
