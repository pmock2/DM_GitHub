package teamHarambe;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.Calendar;

import org.json.JSONObject;

public class Server {
	private static Scanner console = new Scanner(System.in);
	private static String databasePath = "resources/Database.json";
	
	public static List<Team> teams = new LinkedList<>();
	public static List<Referee> referees = new LinkedList<>();
	public static Schedule schedule;
	
	public static void main(String[] args) throws IOException {
		ServerSocket server = new ServerSocket(1234);
		loadData();
		
		System.out.println("Server ready to accept clients.");
		
		while (true) {
			Socket s = server.accept();
			Runnable connectionHandler = new ConnectionHandler(s);
			new Thread(connectionHandler).start();
		}
	}
	
	private static void loadData() throws IOException {
		File dbFile = new File(databasePath);
		if (dbFile.exists()) {
			JSONObject database = new JSONObject(readFile(databasePath, StandardCharsets.UTF_8));
			loadTeams(database.getJSONObject("Teams"));
			loadReferees(database.getJSONObject("Referees"));
			loadSchedule(database.getJSONObject("Schedule"));
			System.out.println(schedule.toString());
		} else {
			dbFile.createNewFile();
			
			System.out.println("Welcome to first time setup!");
			String password = promptInitialPassword();
			
			System.out.println("How many teams will play in the debate season?");
			int numTeams = promptInt(2);
			promptTeams(numTeams);
			
			System.out.println("How many referees will manage the season?");
			int numReferees = promptInt(numTeams/2);		
			generateRefereeList(numReferees);
			
			System.out.println("Enter the season start date.");
			Calendar startDate = promptDate();
		
			schedule = new Schedule(teams, referees);
			
			saveData();
		}
	}
	
	private static void loadTeams(JSONObject teamList) {
		String[] teamIds = JSONObject.getNames(teamList);
		for (int i=0; i < teamIds.length; i ++) {
			JSONObject teamData = teamList.getJSONObject(teamIds[i]);
			int teamId = Integer.parseInt(teamIds[i]);

			teams.add(new Team(
					teamId, teamData.getString("Name"), teamData.getDouble("Wins")
			));
		}
	}
	
	private static void loadReferees(JSONObject refereeList) {
		String[] refereeIds = JSONObject.getNames(refereeList);
		for (int i=0; i < refereeIds.length; i ++) {
			JSONObject refereeData = refereeList.getJSONObject(refereeIds[i]);
			int refereeId = Integer.parseInt(refereeIds[i]);
			
			referees.add(new Referee (
				refereeId, refereeData.getString("Email"), refereeData.getString("Password"), refereeData.getBoolean("IsSuper")
			));
		}
	}
	
	private static void loadSchedule(JSONObject weekList) {
		String[] weekNames = JSONObject.getNames(weekList);
		Week[] weekArray = new Week[weekNames.length];
		
		for (int i=0; i < weekNames.length; i++) {
			Match[] matches = Week.parseWeekMatches(weekList.getJSONObject(weekNames[i]));
			int weekNumber = Integer.parseInt(weekNames[i].replaceAll("\\D+", ""));
			weekArray[weekNumber] = new Week(matches);
		}
		
		schedule = new Schedule(weekArray);
	}
	
	private static void saveData() throws IOException {
		PrintWriter writer = new PrintWriter(databasePath, "UTF-8");
		String dbString = generateDatabaseJSON();
		writer.println(dbString);
		writer.close();
	}
	
	private static String generateDatabaseJSON() {
		String s = "{\n";
		
		s += "\t\"Schedule\" : " + schedule.toJSON() + ",\n";
		
		s += "\t\"Teams\" : {\n";
		for (int i=0; i < teams.size(); i++) {
			s += "\t\t" + teams.get(i).getId() + " : " + teams.get(i).toJSON() + (i+1 == teams.size() ? "" : ",") + "\n";
		}
		s += "\t},\n";
		
		s += "\t\"Referees\" : {\n";
		for (int i=0; i < referees.size(); i++) {
			s += "\t\t" + referees.get(i).getId() + " : " + referees.get(i).toJSON() + (i+1 == referees.size() ? "" : ",") + "\n";
		}
		s += "\t}\n";
		
		s += "}";
		return s;
	}

	private static int promptInt(int minValue) {
		int input = 0;
		
		do {
			try {
				input =  console.nextInt();
				if (input < minValue) {
					System.out.print("Please input an integer >= " + minValue + ": ");
				}
			}
			catch (NumberFormatException e) {
				System.out.print("Please input an integer >= " + minValue + ": ");
			}
		} while (input < minValue);
		
		return input;
	}
	
	private static void promptTeams(int numTeams) {
        System.out.println("Please enter " + numTeams + " team names.");
        for (int i = 0; i < numTeams; i++) {
            System.out.print((i + 1) + ". ");
            teams.add(new Team(i, console.next()));
        }
    }
	
	private static Calendar promptDate() {
		Calendar selectedDate = Calendar.getInstance();//shitty Java library
		int selectedYear, selectedMonth, selectedDay;
		int currentYear = selectedDate.get(Calendar.YEAR);
		int currentMonth = selectedDate.get(Calendar.MONTH);
		int currentDay = selectedDate.get(Calendar.DAY_OF_MONTH);
		
		System.out.print("Enter the season start year: ");
		selectedYear = promptInt(currentYear);
		System.out.print("Enter the season start month: ");
		selectedMonth = promptInt(selectedYear == currentYear ? currentMonth+1 : 1)-1;
		System.out.print("Enter the season start day: ");
		selectedDay = promptInt(selectedYear == currentYear && selectedMonth == currentMonth ? currentDay : 1);
		
		selectedDate.set(selectedYear, selectedMonth, selectedDay);
		
		return selectedDate;
	}
	
	private static String promptInitialPassword() {
		String password;
		System.out.print("Please create a password: ");
		
		password = console.nextLine();
		System.out.println("Your password is " + password);
		
		return password;
	}
	
	private static void generateRefereeList(int numReferees) {
		Random r = new Random();
		
		for (int i=0; i < numReferees; i ++) {
			referees.add(new Referee(r.nextInt(999999999) + 111111111, "email", "password", i==0));
		}
	}
	
	private static String readFile(String path, Charset encoding) throws IOException {
		byte[] encoded = Files.readAllBytes(Paths.get(path));
		return new String(encoded, encoding);
	}

	public static JSONObject rankingsFromSchedule() {
		Team[] sortedTeams = new Team[teams.size()];
		
		for (int i=0; i < sortedTeams.length; i++) {
			int insertAt = 0;
			for (int j=0; j < i; j++) {
				if (sortedTeams[j].getWins() < teams.get(i).getWins()) {
					insertAt++;
				} else {
					break;
				}
			}
			
			//Shift array over
			for (int j=sortedTeams.length-1; j >= insertAt; j--) {
				sortedTeams[j] = sortedTeams[j-1];
			}
			sortedTeams[insertAt] = teams.get(i);
		}
		
		String[][] rankings = new String[sortedTeams.length][2];
		JSONObject rankings2 = new JSONObject(rankings);
		
		int ranking = 1;
		double lastScore = sortedTeams[0].getWins();
		for (int i=0; i < rankings.length; i++) {
			double thisScore = sortedTeams[i].getWins();
			if (thisScore != lastScore) {
				lastScore = thisScore;
				ranking = i+1;
			}
			
			rankings[i] = new String[] {sortedTeams[i].getName(), ""+ranking};
		}
		
		System.out.println("JSONRankings "+rankings2.toString());
		return rankings2;
	}
}
